// Generated by gencpp from file turtlevision/turtlevision_msg.msg
// DO NOT EDIT!


#ifndef TURTLEVISION_MESSAGE_TURTLEVISION_MSG_H
#define TURTLEVISION_MESSAGE_TURTLEVISION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlevision
{
template <class ContainerAllocator>
struct turtlevision_msg_
{
  typedef turtlevision_msg_<ContainerAllocator> Type;

  turtlevision_msg_()
    : degree_left(0.0)
    , degree_right(0.0)
    , notice_information(0)
    , out_line_mpt_x(0)
    , in_line_mpt_x(0)
    , parking_mark_labeling(false)
    , tunnel_mark_labeling(false)  {
    }
  turtlevision_msg_(const ContainerAllocator& _alloc)
    : degree_left(0.0)
    , degree_right(0.0)
    , notice_information(0)
    , out_line_mpt_x(0)
    , in_line_mpt_x(0)
    , parking_mark_labeling(false)
    , tunnel_mark_labeling(false)  {
  (void)_alloc;
    }



   typedef double _degree_left_type;
  _degree_left_type degree_left;

   typedef double _degree_right_type;
  _degree_right_type degree_right;

   typedef int64_t _notice_information_type;
  _notice_information_type notice_information;

   typedef int64_t _out_line_mpt_x_type;
  _out_line_mpt_x_type out_line_mpt_x;

   typedef int64_t _in_line_mpt_x_type;
  _in_line_mpt_x_type in_line_mpt_x;

   typedef uint8_t _parking_mark_labeling_type;
  _parking_mark_labeling_type parking_mark_labeling;

   typedef uint8_t _tunnel_mark_labeling_type;
  _tunnel_mark_labeling_type tunnel_mark_labeling;




  typedef boost::shared_ptr< ::turtlevision::turtlevision_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlevision::turtlevision_msg_<ContainerAllocator> const> ConstPtr;

}; // struct turtlevision_msg_

typedef ::turtlevision::turtlevision_msg_<std::allocator<void> > turtlevision_msg;

typedef boost::shared_ptr< ::turtlevision::turtlevision_msg > turtlevision_msgPtr;
typedef boost::shared_ptr< ::turtlevision::turtlevision_msg const> turtlevision_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlevision::turtlevision_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlevision::turtlevision_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turtlevision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'turtlevision': ['/home/turtle1/catkin_ws/src/turtlebot/turtlevision/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlevision::turtlevision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlevision::turtlevision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlevision::turtlevision_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b34386d8f78f88b1a9120cc20c9497be";
  }

  static const char* value(const ::turtlevision::turtlevision_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb34386d8f78f88b1ULL;
  static const uint64_t static_value2 = 0xa9120cc20c9497beULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlevision/turtlevision_msg";
  }

  static const char* value(const ::turtlevision::turtlevision_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 degree_left\n\
float64 degree_right\n\
int64 notice_information\n\
\n\
int64 out_line_mpt_x\n\
int64 in_line_mpt_x\n\
\n\
bool parking_mark_labeling\n\
bool tunnel_mark_labeling\n\
\n\
";
  }

  static const char* value(const ::turtlevision::turtlevision_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.degree_left);
      stream.next(m.degree_right);
      stream.next(m.notice_information);
      stream.next(m.out_line_mpt_x);
      stream.next(m.in_line_mpt_x);
      stream.next(m.parking_mark_labeling);
      stream.next(m.tunnel_mark_labeling);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtlevision_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlevision::turtlevision_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlevision::turtlevision_msg_<ContainerAllocator>& v)
  {
    s << indent << "degree_left: ";
    Printer<double>::stream(s, indent + "  ", v.degree_left);
    s << indent << "degree_right: ";
    Printer<double>::stream(s, indent + "  ", v.degree_right);
    s << indent << "notice_information: ";
    Printer<int64_t>::stream(s, indent + "  ", v.notice_information);
    s << indent << "out_line_mpt_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.out_line_mpt_x);
    s << indent << "in_line_mpt_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.in_line_mpt_x);
    s << indent << "parking_mark_labeling: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_mark_labeling);
    s << indent << "tunnel_mark_labeling: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tunnel_mark_labeling);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEVISION_MESSAGE_TURTLEVISION_MSG_H
